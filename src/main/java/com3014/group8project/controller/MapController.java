package com3014.group8project.controller;

import com3014.group8project.bean.Booking;
import com3014.group8project.bean.Event;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

/**
 *
 * @author Angelos
 * This controller handles all requests generated by the interactive map view
 * page.
 */
@Controller
public class MapController {

    /**
     * Redirect to the map and add attributes necessary for the colouring of 
     * the map via the methods below.
     */
    @RequestMapping(value = "/mapview", method = RequestMethod.GET)
    protected String viewMap(ModelMap model) throws Exception {
        List<Event> eventList = getEvents();
        model.addAttribute("eventList", eventList);

        List<Booking> bookings = getBookings();
        model.addAttribute("bookingList", bookings);

        return "mapview";
    }

    /**
     * The value of the URI changes based on event the user selects in the drop-down list.
     * It is retrieved in the URI and the map is shown through the redirect below.
     * Finally the map is styled based on this variable and the booked tables are red.
     * @param eventId the Event ID to retrieve from the URI
     */
    @RequestMapping(value = "/mapview/{eventId}", method = RequestMethod.GET)
    protected ModelAndView redirectGetEventId(@PathVariable("eventId") int eventId, RedirectAttributes model) throws IOException, ClassNotFoundException {
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName("redirect:/mapview");

        model.addFlashAttribute("newEventID", eventId);
        model.addFlashAttribute("bookingsByEvent", getBookingsByEvent(eventId));
        model.addFlashAttribute("bookedTablesForCurrentEvent", getBookedTableIDsByEvent(eventId));

        return modelAndView;
    }
    
    /**
     * Return a list of all user bookings from the database
     */
    public List<Booking> getBookings() throws IOException, ClassNotFoundException {
        List<Booking> bookingList = new ArrayList<Booking>();
        try {
            Properties prop = new Properties();
            InputStream inputStream = MapController.class.getClassLoader().getResourceAsStream("config/application.properties");
            prop.load(inputStream);
            Class.forName(prop.getProperty("driver"));
            Connection connection;
            Statement statement;
            ResultSet resultSet;

            connection = DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("user"), prop.getProperty("password"));
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT eventID, tableID, booked, bookingID FROM Booking");

            while (resultSet.next()) {
                Booking booking = new Booking(resultSet.getInt("bookingID"), resultSet.getInt("eventID"), resultSet.getInt("tableID"), resultSet.getBoolean("booked"));
                bookingList.add(booking);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookingList;
    }

    /**
     * Returns a list of all events from the database
     */
    public List<Event> getEvents() throws IOException, ClassNotFoundException {
        List<Event> eventList = new ArrayList<Event>();
        try {
            Properties prop = new Properties();
            InputStream inputStream = MapController.class.getClassLoader().getResourceAsStream("config/application.properties");
            prop.load(inputStream);
            Class.forName(prop.getProperty("driver"));
            Connection connection;
            Statement statement;
            ResultSet resultSet;

            connection = DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("user"), prop.getProperty("password"));
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT eventId, eventName FROM `Event`;");

            while (resultSet.next()) {
                Event event = new Event(resultSet.getInt("eventId"), resultSet.getString("eventName"));
                eventList.add(event);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return eventList;

    }

    /**
     * Retrieves a more specific list of only bookings for a certain event (From the database)
     * @param eventID - which event to retrieve bookings for
     */
    public List<Booking> getBookingsByEvent(int eventID) throws IOException, ClassNotFoundException {
        List<Booking> bookingsByEventId = new ArrayList<Booking>();
        try {
            Properties prop = new Properties();
            InputStream inputStream = MapController.class.getClassLoader().getResourceAsStream("config/application.properties");
            prop.load(inputStream);
            Class.forName(prop.getProperty("driver"));
            Connection connection;
            Statement statement;
            ResultSet resultSet;

            connection = DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("user"), prop.getProperty("password"));
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT eventID, tableID, booked, bookingID FROM Booking WHERE eventID = " + eventID);

            while (resultSet.next()) {
                Booking booking = new Booking(resultSet.getInt("bookingID"), resultSet.getInt("eventID"), resultSet.getInt("tableID"), resultSet.getBoolean("booked"));
                bookingsByEventId.add(booking);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return bookingsByEventId;
    }

    /**
     * Get only the tables that are 100% booked for a certain event (as opposed to available)
     * @param eventID - which event to retrieve bookings for
     * @return
     * @throws IOException
     * @throws ClassNotFoundException 
     */
    public ArrayList<Integer> getBookedTableIDsByEvent(int eventID) throws IOException, ClassNotFoundException {
        ArrayList<Integer> bookedTableIDs = new ArrayList<Integer>();

        try {
            Properties prop = new Properties();
            InputStream inputStream = MapController.class.getClassLoader().getResourceAsStream("config/application.properties");
            prop.load(inputStream);
            Class.forName(prop.getProperty("driver"));
            Connection connection;
            Statement statement;
            ResultSet resultSet;

            connection = DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("user"), prop.getProperty("password"));
            statement = connection.createStatement();
            resultSet = statement.executeQuery("SELECT tableID FROM Booking WHERE eventID = " + eventID);

            while (resultSet.next()) {
                bookedTableIDs.add(resultSet.getInt("tableID"));
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return bookedTableIDs;
    }

}
